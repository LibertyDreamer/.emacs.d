#+STARTUP: overview
#+AUTO_TANGLE: t
#+PROPERTY: header-args:emacs-lisp :noweb yes :tangle ~/.emacs.d/configuration.el

* Install package
#+begin_src emacs-lisp

(defvar all-the-packages-to-install (list))


;;(defmacro use-package (package &rest c)
;;    `(add-to-list 'all-the-packages-to-install 'package))



#+end_src



* Behavior

** Set auto save folder
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/.emacs-backup/" t)))
#+end_src


** Set backup directory
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/.emacs-backup/")))
#+end_src



* Keybindings

** CUA-mode
The popular Ctrl-v (paste), Ctrl-c (copy), Ctrl-z (undo) mode.
#+begin_src emacs-lisp
  (cua-mode)  
#+end_src


** My keybindings
I don't wanna press esc 3 time, just once.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


** Ctrl+f

#+begin_src emacs-lisp
  (straight-use-package 'ctrlf)
  (ctrlf-mode +1)
  (global-set-key (kbd "C-f") 'ctrlf-forward-default)
#+end_src


** Save file
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'save-buffer)
#+end_src



* Emacs UI

** Remove UI elements
Hide the menu bar,
Hide the outdated icons,
Hide the always-visible scrollbar,
Remove the "Welcome to GNU Emacs" splash screen,
And kill scratch buffer.
Ask for textual confirmation instead of GUI.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (add-hook 'after-init-hook (lambda () (kill-buffer "*scratch*")))
  (setq use-file-dialog nil)
#+end_src


** Nyan-cat
Install nyan-mode. And setting it.
*nyan-animate-nyancat* - t to have it animated, nil for a
static version.
*nyan-animation-frame-interval* - number of seconds between
animation frames. Accepts fractional values.
*nyan-bar-length* - length of nyan-mode bar, in 8px-wide units.
*nyan-cat-face-number* - choose a cat face for the console mode.
*nyan-wavy-trail* - t to make the trail wavy; works even better
when animation is enabled!
*nyan-minimum-window-width* - minimum width of the window,
below which Nyan Mode will be disabled.
This is important because Nyan Mode will otherwise push out more
relevant information from the modelilne.
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (setq nyan-animate-nyancat t
	  nyan-animation-frame-interval 0.16
	  nyan-bar-length 20
	  nyan-wavy-trail t)
    (nyan-mode))
#+end_src


** Themes

I will use doom-emacs themes.
For change theme use *load-theme* function.
#+begin_src emacs-lisp
  (use-package doom-themes
    
    :config
    (load-theme 'doom-one t))
#+end_src


** Full column indicator
O would like to see column indicator in programming and org mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'org-mode-hook 'display-fill-column-indicator-mode)
#+end_src



** Line number
I would like to see line numbers in programming and org mode.
Next, set the width of the field with numbers to ‚Äòauto‚Äô to avoid
swaying.
And set collor( This is important to do it after set theme)
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (add-hook 'org-mode-hook 'display-line-numbers-mode)
    (set-face-foreground 'line-number "#c678dd")
    (setq display-line-numbers-width-start t))
#+end_src


** Fonts, icons and unicode

Ok install emacs plagin all-the-icons and check if we have font
don't try to install one.
#+begin_src emacs-lisp
  (use-package all-the-icons
    
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

Install unicode fonsts
#+begin_src emacs-lisp
    (use-package unicode-fonts
      )
#+end_src
Install nerd-fonts

#+begin_src emacs-lisp
  (use-package nerd-icons
    
    :config
    (unless (member "Symbols Nerd Font Mono" (font-family-list))
       (nerd-icons-install-fonts t)))
#+end_src


** Minimap

#+begin_src emacs-lisp 
  ;;(use-package demap)
  ;;(minimap-mode)
#+end_src


** Beacon
Never lose your cursor again
The appearance of the beacon is configured by
*beacon-size* and *beacon-color*.
The duration is configured by
*beacon-blink-duration* and *beacon-blink-delay*.
To customize when the beacon should blink at all,
configure *beacon-blink-when-window-scrolls*,
*beacon-blink-when-window-changes*, and *beacon-blink-when-point-moves*.
To prevent the beacon from blinking only on specific situations
configure *beacon-dont-blink-major-modes*,
*beacon-dont-blink-predicates*, or *beacon-dont-blink-commands*.
You can also disable it only in specific
buffers by doing (setq-local beacon-mode nil).
Beacon can also push the mark for you whenever point moves a long distance.
For this, configure *beacon-push-mark*.
#+begin_src emacs-lisp 
  (use-package beacon
    
    :config
    (setq beacon-size 50
	  beacon-color "#c678dd"
	  beacon-blink-duration 0.01
	  beacon-blink-delay 0.1
	  beacon-blink-when-window-scrolls t
	  beacon-blink-when-window-changes t
	  beacon-push-mark 5
	  beacon-dont-blink-major-modes
	  '(t magit-status-mode magit-popup-mode inf-ruby-mode
	      mu4e-headers-mode gnus-summary-mode
	      gnus-group-mode treemacs-mode dashboard))
    (beacon-mode 1)
    )
#+end_src

** Centaur-tabs
#+begin_src emacs-lisp
   (use-package centaur-tabs
     
   :init
   (setq centaur-tabs-enable-key-bindings t)
   :config
   (setq centaur-tabs-style "wave"
	 centaur-tabs-height 32
	 centaur-tabs-set-icons t
	 centaur-tabs-icon-type 'all-the-icons
	 centaur-tabs-close-button "X"
	 centaur-tabs-set-modified-marker t
	 centaur-tabs-modified-marker "üõ†Ô∏è")

   (centaur-tabs-mode t)
   )

#+end_src

** Treemacs


#+begin_src emacs-lisp 
  (use-package treemacs
    
    :config
    (treemacs))
#+end_src


** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
  
  :defer nil
  :preface
  (defun update-config ()
    "Update Emacs to the latest version."
    (let ((dir (expand-file-name user-emacs-directory)))
      (if (file-exists-p dir)
          (progn
            (message "Emacs is updating!")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished. Switch to the messages buffer
  to see changes and then restart Emacs"))
        (message "\"%s\" doesn't exist." dir))))
  :config
  (setq dashboard-startupify-list '(dashboard-insert-banner
                                    dashboard-insert-newline
                                    dashboard-insert-banner-title
                                    dashboard-insert-newline
                                    dashboard-insert-navigator
                                    dashboard-insert-items
                                    dashboard-insert-newline
                                    dashboard-insert-footer
				    dashboard-insert-newline
				    dashboard-insert-init-info))

  
  (setq dashboard-items '((recents . 10)))
  (setq dashboard-startup-banner 
	(let ((images (cddr (directory-files "~/.emacs.d/dashboard-images" 'full))))
	  (nth (random (length images)) images)))
  (setq dashboard-banner-logo-title "W I T C H M A C S - The cutest Emacs distribution!")
  (setq dashboard-center-content t)
  (setq dashboard-show-shortcuts t)
  (setq dashboard-set-init-info t)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
      `(;; line1
        (
	 (,(all-the-icons-faicon "github" :height 1.1 :v-adjust -0.1)
          "Homepage"
          "Browse homepage"
          (lambda (&rest _) (browse-url "https://github.com/LibertyDreamer/.emacs.d/tree/master")))

	 (,(all-the-icons-octicon "git-merge" :height 1.1 :v-adjust -0.1)
	  "Update"
	  "Update emacs"
	  (lambda (&rest _) (update-config)))
	 
         ("?" "" "?/h" #'show-help nil "<" ">"))
        ;; line 2
        ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
          "Linkedin"
          ""
          (lambda (&rest _) (browse-url "homepage")))
         ("‚öë" nil "Show flags" (lambda (&rest _) (message "flag")) error)

	 )))
  (setq dashboard-icon-type 'all-the-icons)
  (dashboard-setup-startup-hook)
  )

  

  
#+end_src



** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
  
  :config
  ;; –®–∏—Ä–∏–Ω–∞ —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π –ø–æ–ª–æ—Å–∫–∏
  (setq doom-modeline-bar-width 1)
  ;; –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –º–∏–Ω–æ—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã
  (setq doom-modeline-minor-modes t)

  (setq doom-modeline-major-mode-icon t)
  :init (doom-modeline-mode 1))
#+end_src

** Page break line
#+begin_src emacs-lisp
  (use-package page-break-lines
    
    :config
    (global-page-break-lines-mode))
#+end_src

** Where buffers are displayed
I wanna buffer *Help* just center of the emacs
#+begin_src emacs-lisp
;;  (add-to-list 'display-buffer-alist
;;	      '("\\*Help\\*"
;;		(display-buffer-in-atom-window)
;;		(window-height . 12)))

#+end_src






* Utility

** Helm

Let's install and setting it
#+begin_src emacs-lisp  
    (use-package helm
      )
#+end_src

Chose helm like default manager
#+begin_src emacs-lisp  
    (global-set-key (kbd "M-x") 'helm-M-x)
    (setq helm-display-function 'helm-display-buffer-in-own-frame)
#+end_src


** Undo-tree
Treat undo history as a tree.
Install and set undo-tree globally.
set on undo tree auto save and choose spechial folder.
#+begin_src emacs-lisp  
  (use-package undo-tree

  :init
  ;;(global-undo-tree-mode)
  :custom
  ;;(undo-tree-auto-save-history t)
  (undo-tree-history-directory-alist
   '(("." . "~/.emacs.d/undo-tree-history"))))

  
#+end_src


** Yasnippet
#+begin_src emacs-lisp  
    (use-package yasnippet
      
      :config
      (setq yas-snippet-dirs '("~/.emacs.d/yassnippet"))
    (yas-global-mode 1))

#+end_src


** Magit
  
#+begin_src emacs-lisp  
      (use-package magit
	)
#+end_src



** Poly-mode
Polymode is a framework for multiple major modes (MMM) inside a
single Emacs buffer. It is fast and has a simple but flexible object
oriented design. Creating new polymodes normally takes a few lines of code.
#+begin_src emacs-lisp
  ;;(use-package polymode)
  ;;(use-package poly-org)
#+end_src


** Postframe
Posframe can pop up a frame at point, this posframe is a
child-frame connected to its root window‚Äôs buffer.
#+begin_src emacs-lisp
  (use-package posframe
    )
#+end_src


** Minions
#+begin_src emacs-lisp
(use-package minions
    :config
    (setq minions-mode-line-lighter "‚öô")

    (minions-mode 1))
#+end_src



* Org mode

** Org-roam

#+begin_src emacs-lisp
;;  (use-package org)
  (use-package org-roam-ui
  
    ;;    :straight
    ;;     (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    ;;      :after org
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;   :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src


** Org modern

Install org-modern
#+begin_src emacs-lisp  
  (use-package org-modern
    
    :config
    (global-org-modern-mode t))
#+end_src



** Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
    '(
       (python . t)
       (emacs-lisp . t)
      (C . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src


* Programming


** Company mode

Well lets start from installing application,
Next set icons for company 
#+begin_src emacs-lisp

   (use-package company
     :init (setq company-format-margin-function   #'company-vscode-dark-icons-margin)
     :after lsp-mode
     :hook ((lsp-mode emacs-lisp-mode org-mode) . company-mode)
     :bind (:map company-active-map ("<tab>" . company-complete)) (:map company-active-map ("C-c s" . company-yasnippet))
     :config
     (setq company-backends (company-files :with company-yasnippet :with company-capf))
     (setq company-tooltip-align-annotations t)
     (setq company-tooltip-limit 999)
     (setq company-tooltip-offset-display 'scrollbar)
     (global-company-mode 1))

  ;company-keywords, company-ispell company-semantic company-files company-elisp
#+end_src


** LSP-mode
#+begin_src emacs-lisp
 (use-package lsp-mode)
#+end_src


** LSP-ui
#+begin_src emacs-lisp

  (use-package lsp-ui
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-delay 0.5
          lsp-ui-doc-position 'top
          lsp-ui-doc-max-width 50
          lsp-ui-doc-max-height 20
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-use-webkit t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))



    
  ;;    (setq lsp-ui-doc-enable t) 
  ;;  (setq lsp-ui-doc-position 'top)
  ;;  (setq lsp-ui-doc-delay 1)
  ;;    (setq lsp-ui-doc-show-with-mouse t)
  ;;    (setq lsp-ui-doc-show-with-cursor t)
  ;;    (setq lsp-ui-doc-position 'at-point)
#+end_src

** Flycheck !!! OR FLYMAKE

#+begin_src emacs-lisp 
;;(use-package flycheck
  
;;  :config
;;  (add-hook 'after-init-hook #'global-flycheck-mode))

;; (use-package flycheck-color-mode-line )

;;(eval-after-load "flycheck"
;;  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

;;(use-package flycheck-inline )

;;(setq flycheck-display-errors-delay 0)

;;(with-eval-after-load 'flycheck
;;  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))

#+end_src

** Flycheck status emoji
#+begin_src emacs-lisp
;;  (use-package flycheck-status-emoji
;;    
;;    :config
;;    (flycheck-status-emoji-mode t))

;(if (not (find-font (font-spec :name "Noto color emoj")))
;    (all-the-icons-install-fonts t))


;;(setq flycheck-status-emoji-indicator-finished-ok 128571)
;;(setq flycheck-status-emoji-indicator-finished-error 128576)
;;(setq flycheck-status-emoji-indicator-finished-warning 128574)
;;(setq flycheck-status-emoji-indicator-finished-info 128570)
;;(setq flycheck-status-emoji-indicator-suspicious 128572)

#+end_src

** DAP
#+begin_src emacs-lisp
  (use-package dap-mode
    
    :config
    (dap-auto-configure-mode t))
#+end_src




** Rainbow delimiters
#+begin_src emacs-lisp
  ;;(use-package rainbow-delimiters)
  ;;(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  ;;(add-hook 'org-mode-hook #'rainbow-delimiters-mode)
#+end_src




** CPP


** Elisp

*** Clippy
REWRITE my own clippy
#+begin_src emacs-lisp
  (use-package clippy
    )
#+end_src




*** Prism mode
#+begin_src emacs-lisp
  (use-package prism)
  (add-hook 'emacs-lisp-mode-hook #'prism-mode)
  

#+end_src


* Natural language helper


** Define word
is a GNU Emacs package that lets you see the definition
of a word or a phrase at point, without having to switch to a browser.
#+begin_src emacs-lisp
(use-package define-word )
#+end_src

And I wanna define-word appear in box
#+begin_src emacs-lisp
(defun define-word-at-point-in-pop-up (arg &optional service)
  (interactive "P")
  (clippy-say  (format "%s:\n%s" (thing-at-point 'word t)
		       (define-word-at-point arg service))))
#+end_src







* TEST

#+begin_src emacs-lisp

  (use-package which-key
    
    :config
    (which-key-mode)
    (setq which-key-popup-type 'side-window))
    
    (use-package marginalia
  
  :config
  (marginalia-mode))

(use-package embark
  

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
   ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src



* My plaguins

#+begin_src emacs-lisp
  
#+end_src


