#+STARTUP: overview
#+AUTO_TANGLE: t
#+PROPERTY: header-args:emacs-lisp :noweb yes :tangle ~/.emacs.d/configuration.el

* Behavior
** Set auto save folder
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
  `((".*" "~/.emacs.d/.emacs-saves/" t)))
#+end_src

** Set backup directory
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/.emacs-saves/")))
#+end_src


* Emacs UI

** Remove UI elements
Hide the menu bar,
Hide the outdated icons,
Hide the always-visible scrollbar,
Remove the "Welcome to GNU Emacs" splash screen,
And kill scratch buffer.
Ask for textual confirmation instead of GUI.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)             
  (scroll-bar-mode -1)           
  (setq inhibit-splash-screen t)
  (add-hook 'after-init-hook (lambda () (kill-buffer "*scratch*")))
  (setq use-file-dialog nil)     
#+end_src

** Full column indicator
Simply on it
#+begin_src emacs-lisp
  (global-display-fill-column-indicator-mode)
#+end_src
** Line number
I would like to see line numbers. let's turn it on.
Next, set the width of the field with numbers to ‘auto’ to avoid
swaying.
And set collor.
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-width-start t)
  (set-face-foreground 'line-number  "#c678dd")
#+end_src

** Nyan-cat
Install nyan-mode. And setting it.
*nyan-animate-nyancat* - t to have it animated, nil for a
static version.
*nyan-animation-frame-interval* - number of seconds between
animation frames. Accepts fractional values.
*nyan-bar-length* - length of nyan-mode bar, in 8px-wide units.
*nyan-cat-face-number* - choose a cat face for the console mode.
*nyan-wavy-trail* - t to make the trail wavy; works even better
when animation is enabled!
*nyan-minimum-window-width* - minimum width of the window,
below which Nyan Mode will be disabled.
This is important because Nyan Mode will otherwise push out more
relevant information from the modelilne.
#+begin_src emacs-lisp
  (use-package nyan-mode
    :config
    (setq nyan-animate-nyancat t
	  nyan-animation-frame-interval 0.16
	  nyan-bar-length 50
	  nyan-wavy-trail t)
    (nyan-mode))
#+end_src
    
** Fonts, icons and unicode

Ok install emacs plagin all-the-icons and check if we have font
don't try to install one. 
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure t
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

Install unicode fonsts
#+begin_src emacs-lisp
   (use-package unicode-fonts)
  (unicode-fonts-setup)
#+end_src
Install nerd-fonts

#+begin_src emacs-lisp
  
  (use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  
    )
  (nerd-icons-install-fonts)
#+end_src

** Themes

I will use doom-emacs themes.
For change theme use *load-theme* function.
#+begin_src emacs-lisp
  (use-package doom-themes
  :custom-face
  :config
  (load-theme 'doom-one t))
#+end_src

** Minimap
DONT work
#+begin_src emacs-lisp 
  ;;(use-package minimap)
  ;;(minimap-mode)
#+end_src

** Beacon
Never lose your cursor again
The appearance of the beacon is configured by
*beacon-size* and *beacon-color*.
The duration is configured by
*beacon-blink-duration* and *beacon-blink-delay*.
To customize when the beacon should blink at all,
configure *beacon-blink-when-window-scrolls*,
*beacon-blink-when-window-changes*, and *beacon-blink-when-point-moves*.
To prevent the beacon from blinking only on specific situations
configure *beacon-dont-blink-major-modes*,
*beacon-dont-blink-predicates*, or *beacon-dont-blink-commands*.
You can also disable it only in specific
buffers by doing (setq-local beacon-mode nil).
Beacon can also push the mark for you whenever point moves a long distance.
For this, configure *beacon-push-mark*.
#+begin_src emacs-lisp 
  (use-package beacon
    :config
    (setq beacon-size 50
	  beacon-color "#c678dd"
	  beacon-blink-duration 0.01
	  beacon-blink-delay 0.1
	  beacon-blink-when-window-scrolls t
	  beacon-blink-when-window-changes t
	  beacon-push-mark 5
	  beacon-dont-blink-major-modes
	  '(t magit-status-mode magit-popup-mode inf-ruby-mode
	      mu4e-headers-mode gnus-summary-mode
	      gnus-group-mode treemacs-mode dashboard))
    (beacon-mode 1)
    )
#+end_src
** Centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (setq centaur-tabs-style "slant"
	centaur-tabs-height 32
	centaur-tabs-set-icons t
	centaur-tabs-show-new-tab-button t
	centaur-tabs-set-modified-marker t
	centaur-tabs-show-navigation-buttons t
	centaur-tabs-set-bar 'under
	centaur-tabs-show-count nil
	;; centaur-tabs-label-fixed-length 15
	;; centaur-tabs-gray-out-icons 'buffer
	centaur-tabs-plain-icons t
	x-underline-at-descent-line t
	centaur-tabs-left-edge-margin nil)
  ;;(centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-mode t))
#+end_src
** Treemacs
#+begin_src emacs-lisp 
  (use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (treemacs))
#+end_src
PATCH:
Switch off beacon in this buffer.
#+begin_src emacs-lisp
  
#+end_src
** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard 
  :ensure t
  :config
  (setq dashboard-startup-banner "~/.emacs.d//marivector.png"
	dashboard-center-content t
	dashboard-vertically-center-content t
	dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (agenda . 5)
			  (registers . 5)))
  (dashboard-setup-startup-hook)
  )
#+end_src

** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
  :ensure t
  :config
  ;; Ширина разделяющей полоски
  (setq doom-modeline-bar-width 1)
  ;; Показывать ли минорные режимы
  (setq doom-modeline-minor-modes t)

  (setq doom-modeline-major-mode-icon t)
  :init (doom-modeline-mode 1))
#+end_src
** Page break line
#+begin_src emacs-lisp
  (use-package page-break-lines
  :config
  (global-page-break-lines-mode))
#+end_src
** Where buffers are displayed
I wanna buffer *Help* just center of the emacs
#+begin_src emacs-lisp
;;  (add-to-list 'display-buffer-alist
;;	      '("\\*Help\\*"
;;		(display-buffer-in-atom-window)
;;		(window-height . 12)))
#+end_src


* Keybindings
** CUA-mode
The popular Ctrl-v (paste), Ctrl-c (copy), Ctrl-z (undo) mode.
#+begin_src emacs-lisp
(cua-mode)
#+end_src

** My keybindings
I don't wanna press esc 3 time, just once.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


* Utility

** Helm

Let's install and setting it
#+begin_src emacs-lisp  
  (straight-use-package 'helm)
#+end_src

Chose helm like default manager
#+begin_src emacs-lisp  
    (global-set-key (kbd "M-x") 'helm-M-x)
    (setq helm-display-function 'helm-display-buffer-in-own-frame)
#+end_src

** Undo-tree
Treat undo history as a tree.
Install and set undo-tree globally.
set on undo tree auto save and choose spechial folder.
#+begin_src emacs-lisp  
    (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :custom
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist
     '(("." . "~/.emacs.d/undo-tree-history"))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp  
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/yassnippet"))
  (yas-global-mode 1))
#+end_src
** Magit
#+begin_src emacs-lisp  
  (use-package magit)
#+end_src
** Poly-mode
Polymode is a framework for multiple major modes (MMM) inside a
single Emacs buffer. It is fast and has a simple but flexible object
oriented design. Creating new polymodes normally takes a few lines of code.
#+begin_src emacs-lisp
  (use-package poly-org)
#+end_src

** Postframe
Posframe can pop up a frame at point, this posframe is a
child-frame connected to its root window’s buffer.
#+begin_src emacs-lisp
  (require 'posframe)
#+end_src


* Org mode

** Org-roam

#+begin_src emacs-lisp  
;;  (use-package org-roam-ui
;;  :straight
;;    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
;;    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;    :hook (after-init . org-roam-ui-mode)
;;    :config
;;    (setq org-roam-ui-sync-theme t
;;          org-roam-ui-follow t
;;          org-roam-ui-update-on-save t
;;          org-roam-ui-open-on-start t))
#+end_src

** Good-looking

Install org-modern
#+begin_src emacs-lisp  
  (use-package org-modern
    :config
    (global-org-modern-mode t)
    )
#+end_src


* Programming

** Company mode

Well lets start from installing application,
Next set icons for company 
#+begin_src emacs-lisp  
(use-package company
  :init (setq company-format-margin-function    #'company-vscode-dark-icons-margin)
  :after lsp-mode
  :hook ((lsp-mode emacs-lisp-mode org-mode) . company-mode)
  :bind (:map company-active-map ("<tab>" . company-complete)) (:map company-active-map ("C-c s" . company-yasnippet))
  :config
  (setq company-backends '(company-capf company-yasnippet company-keywords company-files company-elisp company-ispell company-semantic company-org-block))
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 20)
  (setq company-tooltip-offset-display 'scrollbar)
  (global-company-mode 1))
#+end_src

** LSP-mode
#+begin_src emacs-lisp
  (use-package lsp-mode)
  ;;(add-hook 'org-mode-hook #'lsp)
  ;;(add-hook 'elisp-mode-hook #'lsp)
#+end_src


** LSP-ui
#+begin_src emacs-lisp

    (use-package lsp-ui :commands lsp-ui-mode)
    (setq lsp-ui-doc-enable t) 
  (setq lsp-ui-doc-position 'top)
  (setq lsp-ui-doc-delay 1)
    (setq lsp-ui-doc-show-with-mouse t)
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-position 'at-point)
#+end_src

** Flycheck

#+begin_src emacs-lisp 


#+end_src

** DAP
#+begin_src emacs-lisp
  (use-package dap-mode
  :ensure t
  :config
  (dap-auto-configure-mode))
#+end_src


* Natural language helper

** Define word
is a GNU Emacs package that lets you see the definition
of a word or a phrase at point, without having to switch to a browser.
#+begin_src emacs-lisp
(use-package define-word)
#+end_src

And I wanna define-word appear in box
#+begin_src emacs-lisp
  
(defun define-word-at-point-in-pop-up (arg &optional service)
  "Use define word at point and show it into postframe"
  (interactive "P")

  (let ((buffer-name (generate-new-buffer-name "define-word-postframe"))) 
    (posframe-show buffer-name
                   :string (format "%s:\n%s" (thing-at-point 'word t) (define-word-at-point arg service))
                   :position (point)
		   :background-color (face-attribute 'tooltip :background)
                   :foreground-color (face-attribute 'tooltip :foreground)
                   :internal-border-width 10
                   :internal-border-color "gray"
                   :border-width 2
                   :border-color "black")))




#+end_src
